from kivy.app import App 
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.core.window import Window
from kivy.uix.popup import Popup
from cryptography.fernet import Fernet
import sqlite3
import os
import string
import secrets

# Set the window background color
Window.clearcolor = (0.1, 0.1, 0.1, 1)  # Dark gray background

# Constants
DB_FILE = "passwords.db"
KEY_FILE = "key.key"

# Generate or load the encryption key
def get_encryption_key():
    if not os.path.exists(KEY_FILE):
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(Fernet.generate_key())
    with open(KEY_FILE, "rb") as key_file:
        return key_file.read()

fernet = Fernet(get_encryption_key())

# Database operations
class DatabaseManager:
    def __init__(self, db_file):
        self.conn = sqlite3.connect(db_file)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS credentials (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                website TEXT NOT NULL,
                                username TEXT NOT NULL,
                                password TEXT NOT NULL,
                                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                            )''')
        self.conn.commit()

    def add_credential(self, website, username, password):
        encrypted_password = fernet.encrypt(password.encode()).decode()
        self.cursor.execute("INSERT INTO credentials (website, username, password) VALUES (?, ?, ?)",
                            (website, username, encrypted_password))
        self.conn.commit()

    def delete_credential(self, cred_id):
        self.cursor.execute("DELETE FROM credentials WHERE id = ?", (cred_id,))
        self.conn.commit()

    def fetch_credentials(self):
        return self.cursor.execute("SELECT id, website, username, password FROM credentials").fetchall()

    def close(self):
        self.conn.close()

db_manager = DatabaseManager(DB_FILE)

# Utility function: Show popup
def show_popup(title, message):
    popup_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
    popup_layout.add_widget(Label(text=message, color=(1, 1, 1, 1)))
    close_button = Button(text="Close", size_hint=(1, 0.3), background_color=(1, 0.3, 0.3, 1))
    popup_layout.add_widget(close_button)

    popup = Popup(title=title, content=popup_layout, size_hint=(0.8, 0.4))
    close_button.bind(on_press=popup.dismiss)
    popup.open()

# Screens
class MainScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)

        title_label = Label(
            text="[b][color=ff6600]Password Manager By SeedCodes[/color][/b]",  # Orange text
            markup=True,
            font_size=32,
            size_hint=(1, 0.2),
            color=(1, 1, 1, 1)
        )
        layout.add_widget(title_label)

        buttons = [
            ("Add Credential", self.go_to_add),
            ("View Credentials", self.go_to_view),
            ("Generate Password", self.go_to_generate)
        ]

        for text, callback in buttons:
            btn = Button(
                text=text,
                size_hint=(1, 0.15),
                background_color=(0.2, 0.6, 1, 1),
                font_size=18,
                color=(1, 1, 1, 1)
            )
            btn.bind(on_press=callback)
            layout.add_widget(btn)

        self.add_widget(layout)

    def go_to_add(self, instance):
        self.manager.current = "add"

    def go_to_view(self, instance):
        self.manager.current = "view"

    def go_to_generate(self, instance):
        self.manager.current = "generate"

class AddScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)

        self.website_input = TextInput(hint_text="Website", multiline=False)
        self.username_input = TextInput(hint_text="Username", multiline=False)
        self.password_input = TextInput(hint_text="Password", password=True, multiline=False)

        for widget in [self.website_input, self.username_input, self.password_input]:
            widget.background_color = (1, 1, 1, 1)
            widget.foreground_color = (0, 0, 0, 1)
            layout.add_widget(widget)

        save_btn = Button(
            text="Save", size_hint=(1, 0.15), background_color=(0, 0.8, 0.2, 1), font_size=18, color=(1, 1, 1, 1)
        )
        save_btn.bind(on_press=self.save_credential)
        layout.add_widget(save_btn)

        back_btn = Button(
            text="Back", size_hint=(1, 0.15), background_color=(0.8, 0.2, 0.2, 1), font_size=18, color=(1, 1, 1, 1)
        )
        back_btn.bind(on_press=self.go_back)
        layout.add_widget(back_btn)

        self.add_widget(layout)

    def save_credential(self, instance):
        website = self.website_input.text.strip()
        username = self.username_input.text.strip()
        password = self.password_input.text.strip()

        if website and username and password:
            db_manager.add_credential(website, username, password)
            self.website_input.text = ""
            self.username_input.text = ""
            self.password_input.text = ""
            show_popup("Success", "Credential saved successfully!")
        else:
            show_popup("Error", "All fields are required.")

    def go_back(self, instance):
        self.manager.current = "main"

class ViewScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)

        # Add a Refresh button at the top
        refresh_btn = Button(
            text="Refresh", size_hint=(1, 0.1), background_color=(0.2, 0.6, 1, 1), font_size=16, color=(1, 1, 1, 1)
        )
        refresh_btn.bind(on_press=self.refresh_credentials)
        layout.add_widget(refresh_btn)

        # Add a scrollable view for the credentials
        self.scroll_view = ScrollView()
        self.credential_list = BoxLayout(orientation='vertical', size_hint_y=None, spacing=20, padding=10)
        self.credential_list.bind(minimum_height=self.credential_list.setter('height'))
        self.scroll_view.add_widget(self.credential_list)

        layout.add_widget(self.scroll_view)

        # Add a Back button at the bottom
        back_btn = Button(
            text="Back", size_hint=(1, 0.1), background_color=(0.8, 0.2, 0.2, 1), font_size=18, color=(1, 1, 1, 1)
        )
        back_btn.bind(on_press=self.go_back)
        layout.add_widget(back_btn)

        self.add_widget(layout)

    def on_enter(self):
        """Automatically refresh credentials when the screen is loaded."""
        self.refresh_credentials()

    def refresh_credentials(self, *args):
        """Refresh the list with updated credentials."""
        self.credential_list.clear_widgets()  # Clear existing entries

        credentials = db_manager.fetch_credentials()

        for idx, (cred_id, website, username, encrypted_password) in enumerate(credentials, start=1):
            decrypted_password = fernet.decrypt(encrypted_password.encode()).decode()

            # Create a box for each credential
            entry_box = BoxLayout(orientation='vertical', spacing=10, size_hint_y=None, height=150)

            # Add the numbered website with spaces for separation
            website_label = Label(
                text=f"{idx}. Website: {website}",
                size_hint_y=None,
                halign='left',
                text_size=(self.width - 40, None),
                height=30,
                color=(1, 1, 1, 1)
            )
            entry_box.add_widget(website_label)

            # Add the username
            username_label = Label(
                text=f"Username: {username}",
                size_hint_y=None,
                halign='left',
                text_size=(self.width - 40, None),
                height=30,
                color=(1, 1, 1, 1)
            )
            entry_box.add_widget(username_label)

            # Add the password
            password_label = Label(
                text=f"Password: {decrypted_password}",
                size_hint_y=None,
                halign='left',
                text_size=(self.width - 40, None),
                height=30,
                color=(1, 1, 1, 1)
            )
            entry_box.add_widget(password_label)

            # Add a delete button
            delete_btn = Button(
                text="Delete", size_hint=(1, 0.1), background_color=(1, 0, 0, 1), color=(1, 1, 1, 1)
            )
            delete_btn.bind(on_press=lambda instance, cred_id=cred_id: self.delete_credential(cred_id))
            entry_box.add_widget(delete_btn)

            # Add the credential entry to the list
            self.credential_list.add_widget(entry_box)

    def delete_credential(self, cred_id):
        """Delete the selected credential and refresh the list."""
        db_manager.delete_credential(cred_id)
        self.refresh_credentials()

    def go_back(self, instance):
        """Return to the main screen."""
        self.manager.current = "main"

class GenerateScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)

        self.generated_password = TextInput(hint_text="Generated Password", multiline=False)
        self.generated_password.background_color = (1, 1, 1, 1)
        self.generated_password.foreground_color = (0, 0, 0, 1)
        layout.add_widget(self.generated_password)

        generate_btn = Button(
            text="Generate", size_hint=(1, 0.15), background_color=(0.2, 0.8, 0.2, 1), font_size=18, color=(1, 1, 1, 1)
        )
        generate_btn.bind(on_press=self.generate_password)
        layout.add_widget(generate_btn)

        back_btn = Button(
            text="Back", size_hint=(1, 0.15), background_color=(0.8, 0.2, 0.2, 1), font_size=18, color=(1, 1, 1, 1)
        )
        back_btn.bind(on_press=self.go_back)
        layout.add_widget(back_btn)

        self.add_widget(layout)

    def generate_password(self, instance):
        characters = string.ascii_letters + string.digits + string.punctuation
        self.generated_password.text = ''.join(secrets.choice(characters) for _ in range(12))

    def go_back(self, instance):
        self.manager.current = "main"

# App
class PasswordManagerApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(MainScreen(name="main"))
        sm.add_widget(AddScreen(name="add"))
        sm.add_widget(ViewScreen(name="view"))
        sm.add_widget(GenerateScreen(name="generate"))
        return sm

    def on_stop(self):
        db_manager.close()

if __name__ == "__main__":
    PasswordManagerApp().run()
